import Base#kqQ2
import TaelinArena.Geometry
import TaelinArena.Game
import TaelinArena.ModelIds
import TaelinArena.Thing

// Apply a player input to the game state
exec_command(cmd: Command, gm: Game) : Game
  case cmd |command
  let fn = (this: Thing) =>
    let silenced = is_silenced(this)
    let stunned  = is_stunned(this)
    case stunned 
    with this : Thing 
    | true => 
      case cmd.inp as inp
      with this : Thing
      | sdir => init_act(this, 0, inp.dir)
      | key0 => this
      | key1 => this
      | key2 => this
      | key3 => this
      | key4 => this
      | key5 => this
      | cmsg => this 
    
    | false => 
      case silenced
      | true => 
        case cmd.inp as inp
        with this : Thing
        | sdir => this <= thing(pad = inp.dir)
        | key0 => this
        | key1 => this
        | key2 => this
        | key3 => this
        | key4 => this
        | key5 => this
        | cmsg => this 
        
      | false => 
        case cmd.inp as inp
        with this : Thing
        | sdir => this <= thing(pad = inp.dir)
        | key0 => init_act(this, 1, inp.pos)
        | key1 => init_act(this, 2, inp.pos)
        | key2 => init_act(this, 3, inp.pos)
        | key3 => init_act(this, 4, inp.pos)
        | key4 => init_act(this, 5, inp.pos)
        | key5 => init_act(this, 6, inp.pos)
        | cmsg => this

    
  with_thing(cmd.pid, fn, gm)

// Checks if two boxes collide, returns outwards vector
collide_with(
  a_pos: V3,
  a_dir: V3,
  a_box: Hitbox,
  b_pos: V3,
  b_dir: V3,
  b_box: Hitbox
) : Maybe(V3)
  case a_box
  |nbox => none(_)
  |cbox => case b_box
    |nbox => none(_)
    |cbox =>
      let dst = dist_v3(a_pos, b_pos)
      let rad = a_box.rad + b_box.rad
      if (dst > 0) && (dst < rad) then
        let out_dir = norm_v3(sub_v3(a_pos, b_pos))
        let out_vec = scale_v3(rad - dst, out_dir)
        some(_ out_vec)
      else
        none(_)
    |pbox =>
      let nil  = none(_)
      let cons = (segment, result) =>
        case result
        |none =>
          case segment |segment
          let dst = point_segment_dist(a_pos, segment)
          let rad = a_box.rad
          if (dst < rad) then
            let out_dir = rot90_v3(norm_v3(sub_v3(segment.a,segment.b)))
            let out_vec = scale_v3(rad - dst, out_dir)
            some(_ out_vec)
          else
            none(_)
        |some => some(_ result.value)
      let segs = polygon_to_segments(b_pos, b_dir, b_box.pts)
      fold(Segment; Maybe(V3); nil, cons, segs)
  |pbox =>
    none(_) // TODO

// Interaction function between two things
interact_with(this:Thing, that:Thing): Thing
  // Physical collisions
  let this =
    case this |thing
    case that |thing
    let out_vec = collide_with(
      this.pos, this.dir, this.box,
      that.pos, that.dir, that.box)
    case out_vec
    | none => this
    | some => this <= thing(pos = add_v3(pos,out_vec.value))
  // Hit by an effect
  let this =
    case that |thing
    let apply_hit = (hit, this) =>
      case hit |hit
      case this |thing
      let out_vec = collide_with(
        this.pos, this.dir, this.box,
        hit.pos, hit.dir, hit.box)
      case out_vec
      | none => this
      | some =>
        let apply_eff = (eff, this) =>
          case eff
          | heal =>
            // IMPORTANT: use commented code. 
            // I inverted this so the puddle on debug mode could heal 
            if this.sid === that.sid then
              this
              // this <= thing(dmg = dmg - eff.lif)
            else
              // this
              this <= thing(dmg = dmg - eff.lif)
          | damage =>
            if this.sid === that.sid then
              this
            else
            // hit shields on thing.buf before hitting hp
              handle_shields(eff.dmg, this)
          | repulse =>
            if this.sid === that.sid then
              this
            else
              let dir = lookat_v3(hit.pos, this.pos, v3(1,0,0))
              let vec = scale_v3(eff.mag, dir)
              this <= thing(knk = vec)
          | impulse =>
            if this.sid === that.sid then
              this
            else
              let vec = scale_v3(eff.mag, eff.dir)
              this <= thing(knk = vec)
          | slow => 
            if this.sid === that.sid then
              this 
            else 
              let updated_buffs = cons(_ slowed(eff.dur, eff.val), this.buf)
              this <= thing(buf = updated_buffs)
          | haste =>
            if this.sid === that.sid then
              this 
            else 
              let updated_buffs = cons(_ hasted(eff.dur, eff.val), this.buf)
              this <= thing(buf = updated_buffs) 
          | shield =>
            if this.sid === that.sid then
              this 
            else 
              let updated_buffs = cons(_ shielded(eff.dur, eff.val), this.buf)
              this <= thing(buf = updated_buffs) 
          | silence => 
            if this.sid === that.sid then
              this 
            else 
              let updated_buffs = cons(_ silenced(eff.dur), this.buf)
              this <= thing(buf = updated_buffs) 
          | root =>
            if this.sid === that.sid then
              this 
            else 
              let updated_buffs = cons(_ rooted(eff.dur), this.buf)
              this <= thing(buf = updated_buffs) 
          | stun => 
            if this.sid === that.sid then 
              this 
            else 
              let updated_buffs = cons(_ stuned(eff.dur), this.buf)
              this <= thing(buf = updated_buffs) 
        fold(Effect; Thing; this, apply_eff, hit.eff)
    fold(Hit; Thing; this, apply_hit, that.hit)
  this

// Like a fold, but with access to a list of other elements
fold_with_context(A; B;
  i: B,
  f: A -> List(A) -> B -> B,
  xs: List(A),
  ys: List(A) -> List(A)
  ) : B
  case xs
  | nil  => i
  | cons =>
    let self = xs.head
    let tail = xs.tail
    let ys2  = (x) => ys(cons(_ xs.head, x))
    let rest = fold_with_context(A; B; i, f, xs.tail, ys2)
    f(xs.head, ys(xs.tail), rest)



// Game's main loop
exec_turn(gm: Game) : Game
  // Interaction function
  let intr = (that,this) => interact_with(this,that)

  // For each thing in the game...
  let tick = (this: Thing, others: List(Thing), res: List(Thing)) =>
    case this |thing

    // Removes past hits
    let this = this <= thing(hit = [])

    // Resets
    let this =
      case this.rst
      | true  => this <= thing(
        vel = v3(0,0,0),
        bst = 1,
        box = cbox(12),
        act = 0,
        tik = 0,
        lit = nil(_),
        rst = false)
      | false => this

    // Integrates position with dash velocity
    let this = this <= thing(pos = add_v3(pos,vel))

    // Integrates position with walk vector
    let boost = speed_multiplier_of(this)
    let this = this <= thing(pos = add_v3(pos,scale_v3(mov*boost,pad)))

    // Decreases duration of all buffs, removes from list if dur=0
    let this = update_buff_dur(this) 

    // Integrates position with knockback
    let this = this <= thing(
      pos = add_v3(pos, knk),
      knk = if len_v3(knk) > 0
        then
          let force = max(len_v3(knk) - this.wei, 0)
          scale_v3(force, norm_v3(knk))
        else knk)

    // Calls the transaction function
    let this = this.fun(this)

    // Calls interaction function with all other things
    let this = fold(Thing; _ this, intr, others)

    // Increments tik counter
    let this = this <= thing(tik = tik + 1)

    // Spawns children
    case this |thing
    let chi_init = (chi) => case chi |thing chi.fun(chi)
    let chi_list = map(Thing; Thing; chi_init, this.chi)
    let this = this <= thing(chi = [])

    // Keeps inside map
    let this = this <= thing(pos =
      case pos |v3
      let x = min(max(-256, pos.x), 256)
      let y = min(max(-160, pos.y), 160)
      let z = min(max(   0, pos.z), 256)
      v3(x, y, z))

    // Bounds HP
    let this = this <= thing(dmg = max(0, min(mhp, dmg)))

    // Dies when 0 is 0
    let no_hp =
      false
      //if (this.sid > 0) && gte(this.dmg, this.mhp)
      //then true
      //else false
    
    // Adds updated thing and new things to stage
    concat(_ chi_list,
      case or(this.die, no_hp) as dead
      |true res
      |false cons(_ this, res))

  // Ticks every thing on stage
  gm <= game(
    stage = fold_with_context(Thing; _ [], tick, stage, (x)=>x))


main exec_turn
